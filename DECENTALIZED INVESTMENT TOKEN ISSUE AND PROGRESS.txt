Got it! Letâ€™s clarify and simplify the **token concept** and how it applies to your system. Since youâ€™re not using crypto payments, the tokens here are **abstract representations** of ownership or profit-sharing rights in a campaign. Each campaign will have its own **unique tokens**, and investors will receive tokens based on their investment.

---

### **1. What Are Tokens?**
In your system, tokens are **digital assets** that represent:
- **Ownership**: Tokens represent a share of the campaign.
- **Profit-Sharing Rights**: Tokens entitle the holder to a share of the profits generated by the campaign.
- **Uniqueness**: Each campaign has its own unique tokens (e.g., named after the campaign).

For example:
- If a campaign is named **"Green Energy Project"**, its tokens could be called **"GEP Tokens"**.
- If another campaign is named **"Tech Startup Fund"**, its tokens could be called **"TSF Tokens"**.

---

### **2. Token Generation for Each Campaign**
When a campaign is created, generate a **unique token name** and a **fixed number of tokens** for that campaign. For example:
- Campaign: **"Green Energy Project"**
  - Token Name: **"GEP Tokens"**
  - Total Tokens: **10,000** (1 token = $1 of the campaignâ€™s goal amount).

---

### **3. Update the Campaign Schema**
Add fields for the **token name** and **total tokens** to the `Campaign` schema:

```javascript
const CampaignSchema = new mongoose.Schema({
  title: { 
    type: String, 
    required: true 
  },
  description: { 
    type: String, 
    required: true 
  },
  goalAmount: { 
    type: Number, 
    required: true 
  },
  tokenName: { 
    type: String, 
    required: true 
  },
  totalTokens: { 
    type: Number, 
    required: true 
  },
  amountRaised: { 
    type: Number, 
    default: 0 
  },
  status: { 
    type: String, 
    enum: ["active", "funded", "closed"], 
    default: "active" 
  },
  owner: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: "User" 
  },
  investors: [{ 
    type: mongoose.Schema.Types.ObjectId, 
    ref: "User" 
  }], // List of investors
  investments: [{ 
    type: mongoose.Schema.Types.ObjectId, 
    ref: "Investment" 
  }], // List of investment records
  timeCreated: {
    type: Date,
    default: () => Date.now(),
  },
});

module.exports = mongoose.model("Campaign", CampaignSchema);
```

---

### **4. Generate Tokens on Campaign Creation**
When a campaign is created, generate a **unique token name** and a **fixed number of tokens**:

```javascript
app.post("/campaigns", isLoggedIn, async (req, res) => {
    try {
        const { title, description, goalAmount } = req.body;

        // Generate a unique token name (e.g., "GEP Tokens" for "Green Energy Project")
        const tokenName = `${title.replace(/\s+/g, '').toUpperCase()} Tokens`;

        // Generate total tokens (1 token = $1 of the goal amount)
        const totalTokens = goalAmount;

        // Create the campaign
        const campaign = new Campaign({
            title,
            description,
            goalAmount,
            tokenName, // Save the token name
            totalTokens, // Save the total tokens
            owner: req.user._id,
        });

        await campaign.save();

        res.status(201).json(campaign);
    } catch (error) {
        console.error("Campaign Creation Error:", error);
        res.status(500).send("Server error, please try again.");
    }
});
```

---

### **5. Distribute Tokens on Investment**
When an investment is made, distribute tokens to the investor based on their investment amount.

#### a. **Token Calculation**
Calculate the tokens to distribute:

```javascript
const tokens = (amount / campaign.goalAmount) * campaign.totalTokens;
```

#### b. **Update the Investment Schema**
Add a `tokens` field to the `Investment` schema:

```javascript
const InvestmentSchema = new mongoose.Schema({
  investor: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: "User", 
    required: true 
  },
  campaign: { 
    type: mongoose.Schema.Types.ObjectId, 
    ref: "Campaign", 
    required: true 
  },
  amount: { 
    type: Number, 
    required: true 
  },
  tokens: { 
    type: Number, 
    required: true 
  },
  transactionHash: { 
    type: String, 
    required: true 
  },
  timeCreated: {
    type: Date,
    default: () => Date.now(),
  },
});

module.exports = mongoose.model("Investment", InvestmentSchema);
```

#### c. **Handle Investment Creation**
When an investment is made, distribute tokens and save the investment:

```javascript
app.post("/campaigns/invest", isLoggedIn, async (req, res) => {
    try {
        const { campaignId, amount } = req.body;
        const investorId = req.user._id;

        // Validate Input
        if (!campaignId || !amount || amount <= 0) {
            return res.status(400).send("Invalid investment details.");
        }

        // Find the campaign
        const campaign = await Campaign.findById(campaignId);
        if (!campaign) {
            return res.status(404).send("Campaign not found.");
        }

        // Calculate tokens
        const tokens = (amount / campaign.goalAmount) * campaign.totalTokens;

        // Step 1: Save the investment to the blockchain
        const { saveToBlockchain } = require("../services/blockchainService");
        const transactionHash = await saveToBlockchain({
            campaignId,
            investorId,
            amount,
            tokens,
        });

        // Step 2: Create Investment Record in MongoDB
        const investment = new Investment({
            investor: investorId,
            campaign: campaignId,
            amount,
            tokens,
            transactionHash,
        });

        await investment.save();

        // Step 3: Update Campaign's Amount Raised & Investors
        campaign.amountRaised += amount;

        if (!campaign.investors.includes(investorId)) {
            campaign.investors.push(investorId);
        }

        campaign.investments.push(investment._id);
        await campaign.save();

        // Step 4: Update Investor's Token Balance
        const investor = await User.findById(investorId);
        investor.tokens += tokens; // Add tokens to the investor's account
        await investor.save();

        res.status(201).json(investment);
    } catch (error) {
        console.error("Investment Error:", error);
        res.status(500).send("Server error, please try again.");
    }
});
```

---

### **6. Visualize Tokens in the Investorâ€™s Account**
To display tokens in the investorâ€™s account, create a route to fetch their token balance:

```javascript
app.get("/investor/tokens", isLoggedIn, async (req, res) => {
    try {
        const investor = await User.findById(req.user._id).populate({
            path: "investments",
            populate: { path: "campaign", select: "title tokenName" },
        });

        // Group tokens by campaign
        const tokensByCampaign = investor.investments.map((investment) => ({
            campaign: investment.campaign.title,
            tokenName: investment.campaign.tokenName,
            tokens: investment.tokens,
        }));

        res.status(200).json({ tokensByCampaign });
    } catch (error) {
        console.error("Token Fetch Error:", error);
        res.status(500).send("Server error, please try again.");
    }
});
```

---

### **7. Additional Suggestions**
1. **Profit Sharing**:
   - Use tokens to distribute profits to investors based on their token holdings.

2. **Token Trading**:
   - Create a marketplace for investors to trade tokens.

3. **Campaign Milestones**:
   - Allow campaigns to set milestones and release funds based on progress.

4. **Investor Dashboard**:
   - Build a dashboard for investors to view their investments, tokens, and profits.

5. **Notifications**:
   - Send notifications to investors when new campaigns are launched or profits are distributed.

---

### **8. Summary**
- **Tokens** are unique to each campaign and represent ownership or profit-sharing rights.
- **Campaign Creation**: Generate a unique token name and a fixed number of tokens.
- **Investment Creation**: Distribute tokens based on the investment amount.
- **Visualization**: Display tokens in the investorâ€™s account.
- **Additional Features**: Profit sharing, token trading, milestones, and notifications.

Let me know if you need further assistance or clarification! ðŸš€